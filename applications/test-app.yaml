# Multi-Tier Application for Network Chaos Testing

---
# Frontend Service (simulates user-facing web app)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: chaos-sandbox
  labels:
    app: frontend-app
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
        tier: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        # Add custom nginx config that calls backend
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config
        configMap:
          name: frontend-config

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: chaos-sandbox
spec:
  selector:
    app: frontend-app
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer

---
# Backend API Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: chaos-sandbox
  labels:
    app: backend-api
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
        tier: backend
    spec:
      containers:
      - name: backend
        image: python:3.11-slim
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        # Ensure required libraries are present for the embedded app.py
        command: ["sh", "-c", "pip install --no-cache-dir flask redis && python /app/app.py"]
        volumeMounts:
        - name: backend-script
          mountPath: /app
      volumes:
      - name: backend-script
        configMap:
          name: backend-config

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: chaos-sandbox
spec:
  selector:
    app: backend-api
  ports:
  - port: 80
    targetPort: 80

---
# Database Service (simulates data layer)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: chaos-sandbox
  labels:
    app: database
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        tier: database
    spec:
      containers:
      - name: db
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: chaos-sandbox
spec:
  selector:
    app: database
  ports:
  - port: 6379
    targetPort: 6379

---
# Configuration for frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: chaos-sandbox
data:
  default.conf: |
    upstream backend {
        server backend-service:80;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # Serve static content
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        # Proxy API calls to backend
        location /api/ {
            proxy_pass http://backend/;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

---
# Backend API Flask app
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: chaos-sandbox
data:
  app.py: |
    from flask import Flask, jsonify
    import redis
    import os
    from datetime import datetime

    app = Flask(__name__)

    redis_host = os.getenv('REDIS_HOST', 'database-service')
    redis_port = int(os.getenv('REDIS_PORT', 6379))

    def check_redis():
        try:
            r = redis.Redis(host=redis_host, port=redis_port, socket_connect_timeout=2)
            r.ping()
            return True
        except redis.exceptions.RedisError:
            return False

    @app.route('/')
    def index():
        return jsonify({
            "status": "ok",
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "message": "Backend API is responding"
        })

    @app.route('/health')
    def health():
        db_status = "connected" if check_redis() else "error"
        return jsonify({
            "status": "healthy",
            "checks": {
                "database": db_status,
                "memory": "ok",
                "disk": "ok"
            }
        })

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=80)
